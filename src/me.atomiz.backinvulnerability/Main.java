package me.atomiz.backinvulnerability;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabExecutor;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerTeleportEvent;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class Main extends JavaPlugin implements Listener, TabExecutor {

    FileConfiguration config;
    int[] durations = new int[2];
    List<UUID> backExecuted = new ArrayList<>();

    @Override
    public void onEnable() {
        reload();

        getServer().getPluginManager().registerEvents(this, this);

        getServer().getLogger().info("Enabled BackInvulnerability");
    }

    void reload() {
        saveDefaultConfig();
        config = getConfig();

        durations[0] = config.getInt("duration");
        durations[1] = config.getInt("durationBetweenWorlds");
    }

    @Override
    public void onDisable() {
        getServer().getLogger().info("Disabled BackInvulnerability");
    }

    @EventHandler(priority = EventPriority.LOWEST)
    public void onBack(PlayerCommandPreprocessEvent e) {
        if (!e.getMessage().equals("/back")) return;
        backExecuted.add(e.getPlayer().getUniqueId());
    }

    @EventHandler
    public void onTeleport(PlayerTeleportEvent e) {
        if (e.getCause() != PlayerTeleportEvent.TeleportCause.COMMAND) return;

        Player p = e.getPlayer();

        if (backExecuted.contains(p.getUniqueId())) {
            if (e.getFrom().getWorld().getName().equals(e.getTo().getWorld().getName())) {
                p.addPotionEffect(new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE,
                        durations[0] * 20, 5000));
                backExecuted.remove(e.getPlayer().getUniqueId());
            } else {
                p.addPotionEffect(new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE,
                        durations[1] * 20, 5000));
                Bukkit.getScheduler().runTaskLater(this, () -> backExecuted.remove(p.getUniqueId()), durations[1] * 20L);
            }
        }
    }

    @EventHandler
    public void onMove(PlayerMoveEvent e) {
        if (backExecuted.contains(e.getPlayer().getUniqueId())) {
            Player p = e.getPlayer();

            p.removePotionEffect(PotionEffectType.DAMAGE_RESISTANCE);

            p.addPotionEffect(new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, durations[0] * 20, 5000));
            backExecuted.remove(p.getUniqueId());
        }
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (args.length == 1 && args[0].equals("reload") && sender.hasPermission("backInvulnerability.reload")) {
            reload();
            sender.sendMessage(ChatColor.GREEN + "Reloaded config.");
            return true;
        }
        return false;
    }

    @Override
    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
        List<String> tab = new ArrayList<>();
        if (args.length == 1 && (args[0].startsWith("r") || args[0].isBlank()) && sender.hasPermission("backInvulnerability.reload")) {
            tab.add("reload");
        }

        return tab;
    }
}