package me.atomiz.backinvulnerability;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerTeleportEvent;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class Main extends JavaPlugin implements Listener {

    List<UUID> backExecuted = new ArrayList<>();

    @Override
    public void onEnable() {
        getServer().getPluginManager().registerEvents(this, this);

        getServer().getLogger().info("Enabled BackInvulnerability");
    }

    @Override
    public void onDisable() {
        getServer().getLogger().info("Disabled BackInvulnerability");
    }

    @EventHandler(priority = EventPriority.LOWEST)
    public void onBack(PlayerCommandPreprocessEvent e) {
        if (!e.getMessage().equals("/back")) return;
        backExecuted.add(e.getPlayer().getUniqueId());
    }

    @EventHandler
    public void onTeleport(PlayerTeleportEvent e) {
        if (e.getCause() != PlayerTeleportEvent.TeleportCause.COMMAND) return;

        Player p = e.getPlayer();

        if (backExecuted.contains(p.getUniqueId())) {
            if (e.getFrom().getWorld().getName().equals(e.getTo().getWorld().getName())) {
                p.addPotionEffect(new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 3 * 20, 5000));
                backExecuted.remove(e.getPlayer().getUniqueId());
            } else {
                p.addPotionEffect(new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 10 * 20, 5000));
                Bukkit.getScheduler().runTaskLater(this, () -> {
                    if (p.hasPotionEffect(PotionEffectType.DAMAGE_RESISTANCE))
                        if (p.getPotionEffect(PotionEffectType.DAMAGE_RESISTANCE).getAmplifier() == 5000)
                            p.removePotionEffect(PotionEffectType.DAMAGE_RESISTANCE);
                    backExecuted.remove(p.getUniqueId());
                }, 10 * 20L);
            }
        }
    }

    @EventHandler
    public void onMove(PlayerMoveEvent e) {
        if (backExecuted.contains(e.getPlayer().getUniqueId())) {
            Player p = e.getPlayer();

            p.removePotionEffect(PotionEffectType.DAMAGE_RESISTANCE);

            p.addPotionEffect(new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 3 * 20, 5000));
            backExecuted.remove(p.getUniqueId());
        }
    }
}